{
  "version": 3,
  "sources": ["../../../src/lib/preview_links.ts", "../../../src/browser.ts"],
  "sourcesContent": ["// deno-lint-ignore-file no-namespace\nexport namespace constants {\n    export const statically: string = 'https://cdn.statically.io/gh/{owner}/{repo}/{branch}/{file}';\n    export const githack: string = 'https://raw.githack.com/{owner}/{repo}/{branch}/{file}';\n\n    export const GITHACK: string = \"githack\";\n    export const STATICALLY: string = \"statically\";\n\n    export const old_version: string = 'https://{owner}.github.io/{repo}/{file}';\n    export const gh_api: string = 'https://api.github.com/repos/{owner}/{repo}/pulls/{number}';\n    export const html_diff: string = 'https://services.w3.org/htmldiff?doc1={old}&doc2={new}';\n    export const spec_gen: string = 'https://labs.w3.org/spec-generator/?type=respec&url={url}'\n\n    export const markdown: string = `\nSee:\n\n* [Preview]({preview})\n* [Diff]({diff})\n`\n}\n\n/* ======================================= Core operations ========================= */\n\ninterface Repo {\n    owner :string;\n    repo :string;\n}\n\ninterface Branch {\n    branch :string;\n}\n\nexport interface URLs {\n    new :string;\n    diff :string;\n}\n\n// to make typescript happy\ninterface Octo {\n    head : {\n        repo: {\n            full_name : string\n        },\n        ref : string,\n    }\n}\n\n/**\n * Generate all the URLs based on the JSON data of the PR. That JSON data is the one\n * returned by the GitHub API\n *\n * @param main_repo - identification of the main repo, ie, the target of the PR\n * @param octocat - the data returned by the GitHub API for the PR\n * @param service - name of the caching service\n * @param respec - whether the sources are to be encapsulated into a spec generator call for respec in the html diff\n * @param path - the path of the file to be converted\n */\nfunction get_urls(main_repo: Repo, octocat: Octo, service: string, respec: boolean, path: string = 'index.html') :URLs {\n    /**\n    * The URL used in the spec generator must be percent encoded\n    */\n    const encodeurl = (url :string) :string => {\n        return url.replace(/\\?/g,'%3F').replace(/&/g,'%26')\n    }\n\n    // Get the data for the repository of the submission\n    const head_repo = octocat.head.repo.full_name.split('/');\n    const submission_repo :Repo = {\n        owner : head_repo[0],\n        repo  : head_repo[1],\n    };\n\n    // Get the data for the submission branch\n    const submission_branch :Branch = {\n        branch : octocat.head.ref,\n    }\n\n    // Get the new version's URL\n    const service_url = (service === constants.GITHACK ? constants.githack : constants.statically);\n    const new_version :string = service_url\n        .replace('{owner}', submission_repo.owner)\n        .replace('{repo}', submission_repo.repo)\n        .replace('{branch}', submission_branch.branch)\n        .replace('{file}', path);\n\n    // Get the original versions' URL (used for the diff)\n    const old_version :string = constants.old_version\n        .replace('{owner}', main_repo.owner)\n        .replace('{repo}', main_repo.repo)\n        .replace('{file}', path);\n\n    // If we the sources are in ReSpec, the URLs used in the HTML diff must be a call out to the spec generator\n    // to generate the final HTML on the fly. Note that the URLs must be percent encoded.\n    const new_spec = respec ? encodeurl(constants.spec_gen.replace('{url}', new_version)) : new_version;\n    const old_spec = respec ? encodeurl(constants.spec_gen.replace('{url}', old_version)) : old_version;\n\n    return {\n        new  : new_version,\n        diff : constants.html_diff.replace('{old}',old_spec).replace('{new}', new_spec)\n    }\n}\n\n/**\n * Get the preview and html diff URLs for a PR.\n *\n * @async\n * @param url - URL of the PR\n * @param service - name of the caching service\n * @param respec - Flag whether the documents are in ReSpec, i.e., should be converted before establish the diffs\n * @param paths - Path to the file to be converted\n */\nexport async function get_data(url :string, service: string, respec = true, paths :string[] = ['index.html']) :Promise<URLs[]> {\n    /**\n     *\n     * The standard idiom to get JSON data via fetch\n     * @async\n     */\n    const fetch_json = async (resource_url :string) :Promise<Octo> => {\n        const response = await fetch(resource_url);\n        return await response.json();\n    }\n\n    // The URL for the PR.\n    const parsed_path = new URL(url).pathname.split('/');\n    const home_repo :Repo = {\n        owner : parsed_path[1],\n        repo  : parsed_path[2],\n    };\n    const pr_number :string = parsed_path[4];\n\n    const gh_api_url = constants.gh_api\n        .replace('{owner}', home_repo.owner)\n        .replace('{repo}', home_repo.repo)\n        .replace('{number}', pr_number);\n    const octocat: Octo = await fetch_json(gh_api_url);\n\n    return paths.map((path) => get_urls(home_repo, octocat, service, respec, path));\n}", "import * as preview_links from './lib/preview_links.ts';\n\nasync function main(_e: Event) {\n    try {\n        // Get the data from the HTML\n        const url      = document.getElementById('url') as HTMLInputElement;\n\n        // Get the service name\n        const service  = document.getElementById('service') as HTMLSelectElement;\n\n        // This is the flag on whether this is a pure html file or a ReSpec\n        const text     = document.getElementById('text') as HTMLInputElement;\n        const respec   = !text.checked\n\n        // This is the place for the generated output\n        const markdown = document.getElementById('markdown') as HTMLTextAreaElement;\n\n        // Get the preview data and generate a markdown snippet\n        const URLs :preview_links.URLs[] = await preview_links.get_data(url.value, service.value, respec);\n        markdown.value = preview_links.constants.markdown.replace('{preview}', URLs[0].new).replace('{diff}', URLs[0].diff);\n    } catch (err) {\n        alert(`preview error: ${err}`);\n    }\n}\n\nglobalThis.addEventListener('load', () => {\n    const go_button = document.getElementById('go');\n    go_button.addEventListener('click', main);\n});\n"],
  "mappings": "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",
  "names": ["constants"]
}
